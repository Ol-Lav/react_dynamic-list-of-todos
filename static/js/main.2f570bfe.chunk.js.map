{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setUserId","useState","query","setQuery","selectedOption","setSelectedOption","visibleTodoList","setVisibleTodoList","useEffect","filter","todo","completed","filteredTodoList","title","toLowerCase","includes","className","type","value","onChange","event","target","defaultValue","selected","onClick","sort","Math","random","map","classNames","checked","readOnly","userId","id","fetchData","url","fetch","then","response","json","CurrentUser","selectedUserId","clearUser","selectedUser","setSelectedUser","data","name","email","phone","App","setSelectedUserId","setTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f570bfe.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../Types/Todo';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  setUserId: (number: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, setUserId }) => {\n  const [query, setQuery] = useState('');\n  const [selectedOption, setSelectedOption] = useState('');\n  const [visibleTodoList, setVisibleTodoList] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    setVisibleTodoList(todos.filter(todo => {\n      switch (selectedOption) {\n        case 'All':\n          return todo;\n        case 'Active':\n          return !todo.completed;\n        case 'Completed':\n          return todo.completed;\n        default:\n          return todo;\n      }\n    }));\n  }, [query, todos, selectedOption]);\n\n  const filteredTodoList = visibleTodoList.filter(\n    todo => todo.title.toLowerCase().includes(query.toLowerCase()),\n  );\n\n  const randomize = () => {\n    const list = filteredTodoList;\n\n    setVisibleTodoList(list.sort(() => 0.5 - Math.random()));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <select\n        defaultValue={selectedOption}\n        onChange={(event) => setSelectedOption(event.target.value)}\n      >\n        <option value=\"All\" selected>\n          All\n        </option>\n        <option value=\"Active\">\n          Active\n        </option>\n        <option value=\"Completed\">\n          Completed\n        </option>\n      </select>\n      <button\n        type=\"button\"\n        onClick={randomize}\n      >\n        Randomize\n      </button>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodoList.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n\n            >\n              <label>\n\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => {\n                  setUserId(todo.userId);\n                }}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { User } from './Types/User';\nimport { Todo } from './Types/Todo';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction fetchData(url: string) {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n}\n\nexport function fetchTodos(): Promise<Todo[]> {\n  return fetchData('/todos');\n}\n\nexport function fetchUserById(id:number): Promise<User> {\n  return fetchData(`/users/${id}`);\n}\n","import React, { useState, useEffect } from 'react';\nimport { User } from '../../Types/User';\nimport { fetchUserById } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number,\n  clearUser: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ selectedUserId, clearUser }) => {\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  useEffect(() => {\n    fetchUserById(selectedUserId)\n      .then(data => setSelectedUser(data));\n  }, [selectedUserId]);\n\n  return (\n\n    <div className=\"CurrentUser\">\n      {selectedUser && (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {' '}\n              {selectedUserId}\n            </span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n          <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n          <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n          <button\n            type=\"button\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './Types/Todo';\nimport { fetchTodos } from './api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    fetchTodos()\n      .then(data => setTodos(data));\n  }, []);\n\n  const clearUser = () => {\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          setUserId={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              clearUser={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}